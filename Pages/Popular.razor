@inject HttpClient Http
@inject IJSRuntime JS

<!-- Main content -->
<div class="content-sec">
    <div class="top-sec">
        <h2>Popular topics</h2>
    </div>

    <!-- Category Filter -->
    <div class="categorys">
        <div class="itm" @onclick='() => FetchSlidesByCategory(null)'><a>All</a></div>
        <div class="itm" @onclick='() => FetchSlidesByCategory("Travel")'><a>Travel</a></div>
        <div class="itm" @onclick='() => FetchSlidesByCategory("Adventure")'><a>Adventure</a></div>
        <div class="itm" @onclick='() => FetchSlidesByCategory("Movie")'><a>Movie</a></div>
        <div class="itm" @onclick='() => FetchSlidesByCategory("Tech")'><a>Tech</a></div>
    </div>

    <div class="contnt">
        @if (slides is null)
        {
            <div class="loader"></div>
        }
        else if (slides.Count == 0)
        {
            <p class="no-slides">No slides found.</p>
        }
        else
        {
            @foreach (var slide in displayedSlides)
            {
                <div class="card">
                    <div class="card-image" @onclick="() => OpenModal(slide)">
                        <img src="@slide.ImageUrl" alt="@slide.Title">
                        <div class="category-badge">@slide.Category</div>
                    </div>
                    <div class="card-content">
                        <p class="date">@slide.Date</p>
                        <h3 class="title">@slide.Title</h3>
                        <div class="interaction">
                            <button class="like-btn" @onclick="() => ToggleLike(slide.Id!)">
                                <span class="like-icon">@(slide.Likes!.Contains(username!) ? "❤️" : "🤍")</span> 
                                <span class="like-count">@slide!.Likes!.Count</span>
                            </button>
                            <button class="comment-btn" @onclick="() => OpenModal(slide)">
                                <span class="comment-icon">💬</span>
                                <span class="comment-count">@slide!.Comments!.Count</span>
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Comment Modal -->
    @if (selectedSlide != null)
    {
        <div class="modal-overlay" @onclick="CloseModal">
            <div class="modal-content" @onclick:stopPropagation>
                <button class="close-btn" @onclick="CloseModal">&times;</button>
                
                <div class="modal-header">
                    <h2>@selectedSlide.Title</h2>
                    <div class="modal-meta">
                        <span class="modal-date">@selectedSlide.Date</span>
                        <span class="modal-category">@selectedSlide.Category</span>
                    </div>
                </div>
                
                <div class="modal-description">
                    <p>@selectedSlide.Description</p>
                    <div class="comment-form">
                        <input type="text" @bind="newComment" placeholder="Add a comment..." class="comment-input">
                        <button class="submit-btn" @onclick="SubmitComment" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner"></span>
                            }
                            else
                            {
                                <span>Post</span>
                            }
                        </button>
                </div>

                <div class="comments-section">
                    <h3>Comments (@selectedSlide.Comments!.Count)</h3>
                    
                    <div class="comments-list">
                        @if (selectedSlide.Comments!.Count == 0)
                        {
                            <div class="no-comments">Be the first to comment!</div>
                        }
                        else
                        {
                            @foreach (var comment in selectedSlide.Comments!)
                            {
                                <div class="comment-item">
                                    <div class="comment-avatar">
                                        @comment.Username![0]
                                    </div>
                                    <div class="comment-content">
                                        <div class="comment-author">@comment.Username</div>
                                        <div class="comment-text">@comment.Text</div>
                                        <div class="comment-date">
                                            @(comment.Date.HasValue ? comment.Date.Value.ToString("MMM dd, yyyy") : "")
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    
                    
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Slide> slides = new();
    private List<Slide> displayedSlides = new();
    private int maxDisplayCount = 6;
    private Slide? selectedSlide;
    private string? newComment;
    private string? username;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        LoadUsernameFromLocalStorage();
        await FetchSlidesByCategory(null);
    }

    private async Task FetchSlidesByCategory(string? category)
    {
        try
        {
            string baseUrl = "https://localhost:7061";
            string url = category is null ? $"{baseUrl}/api/slider" : $"{baseUrl}/api/slider/category/{category}";

            // Disable caching by adding a timestamp query parameter
            url += $"?timestamp={DateTime.UtcNow.Ticks}";

            slides = await Http.GetFromJsonAsync<List<Slide>>(url) ?? new();
            displayedSlides = slides.Take(maxDisplayCount).ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching slides: {ex.Message}");
        }
    }

    private void OpenModal(Slide slide)
    {
        selectedSlide = slide;
    }


    private void CloseModal()
    {
        selectedSlide = null;
    }
    private async Task ToggleLike(string slideId)
    {
        if (string.IsNullOrEmpty(username))
        {
            username = await PromptForUsername();
            if (string.IsNullOrEmpty(username)) return;
        }

        var slide = slides.FirstOrDefault(s => s.Id == slideId);
        if (slide == null) return;

        bool hasLiked = slide.Likes!.Contains(username);

        // Optimistically update UI
        if (hasLiked)
        {
            slide.Likes!.Remove(username);
        }
        else
        {
            slide.Likes!.Add(username);
        }
        StateHasChanged(); // Update the UI immediately

        try
        {
            HttpResponseMessage response = hasLiked
                ? await Http.PostAsJsonAsync($"https://localhost:7061/api/slider/{slideId}/unlike", new { Username = username })
                : await Http.PostAsJsonAsync($"https://localhost:7061/api/slider/{slideId}/like", new { Username = username });

            if (!response.IsSuccessStatusCode)
            {
                // Revert UI change if API call fails
                if (hasLiked)
                {
                    slide.Likes!.Add(username);
                }
                else
                {
                    slide.Likes!.Remove(username);
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling like: {ex.Message}");

            // Revert UI on error
            if (hasLiked)
            {
                slide.Likes!.Add(username);
            }
            else
            {
                slide.Likes!.Remove(username);
            }
            StateHasChanged();
        }
    }



    private async Task SubmitComment()
    {
        if (string.IsNullOrEmpty(username))
        {
            username = await PromptForUsername();
            if (string.IsNullOrEmpty(username)) return;
        }

        if (selectedSlide == null || string.IsNullOrWhiteSpace(newComment)) return;

        // Add a loading state
        isLoading = true;
        StateHasChanged();

        try
        {
            var commentObj = new Comment { Username = username, Text = newComment, Date = DateTime.UtcNow };

            // Update UI instantly by adding the comment to selectedSlide
            selectedSlide.Comments!.Add(commentObj);
            newComment = string.Empty;
            StateHasChanged(); // Refresh UI immediately

            var response = await Http.PostAsJsonAsync($"https://localhost:7061/api/slider/{selectedSlide.Id}/comment",
                new { Username = username, Comment = commentObj.Text });

            if (response.IsSuccessStatusCode)
            {
                var updatedSlide = await response.Content.ReadFromJsonAsync<Slide>();
                if (updatedSlide != null)
                {
                    // Find the slide and update its comments
                    var slideIndex = slides.FindIndex(s => s.Id == selectedSlide.Id);
                    if (slideIndex != -1)
                    {
                        slides[slideIndex] = updatedSlide;
                        displayedSlides = slides.Take(maxDisplayCount).ToList();
                    }

                    // Also update the selectedSlide in the modal
                    selectedSlide = updatedSlide;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding comment: {ex.Message}");
        }

        // Remove loading state
        isLoading = false;
        StateHasChanged();
    }



    private async Task<string?> PromptForUsername()
    {
        string? input = await JS.InvokeAsync<string>("prompt", "Enter your username:");
        if (!string.IsNullOrEmpty(input))
        {
            var expiry = DateTime.UtcNow.AddDays(1);
            await JS.InvokeVoidAsync("localStorage.setItem", "username", input);
            await JS.InvokeVoidAsync("localStorage.setItem", "username_expiry", expiry.ToString());
        }
        return input;
    }

    private async void LoadUsernameFromLocalStorage()
    {
        string? storedUsername = await JS.InvokeAsync<string>("localStorage.getItem", "username");
        string? expiryStr = await JS.InvokeAsync<string>("localStorage.getItem", "username_expiry");

        if (!string.IsNullOrEmpty(storedUsername) && DateTime.TryParse(expiryStr, out DateTime expiry) && expiry > DateTime.UtcNow)
        {
            username = storedUsername;
        }
        else
        {
            await JS.InvokeVoidAsync("localStorage.removeItem", "username");
            await JS.InvokeVoidAsync("localStorage.removeItem", "username_expiry");
        }
    }
    public class Slide
    {
       
        public string? Id { get; set; } = string.Empty;

        public string ImageUrl { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public string Date { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;

        public List<string>? Likes { get; set; } = new(); // Stores usernames who liked the post
        public List<Comment>? Comments { get; set; } = new(); // Stores comments
    }

    public class Comment
    {
        public string? Username { get; set; } = string.Empty;
        public string? Text { get; set; } = string.Empty;
        public DateTime? Date { get; set; }
    }


    public class LikeRequest
    {
        public string? Username { get; set; } = string.Empty;
    }

    public class CommentRequest
    {
        public string? Username { get; set; } = string.Empty;
        public string? Comment { get; set; } = string.Empty;
    }
}

<style>
    /* Base styles and resets */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Poppins', 'Segoe UI', sans-serif;
    }

    body {
        background-color: #0f0f13;
        color: #e0e0e0;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
    }

    /* Main content section */
    .content-sec {
        
        margin: 0 auto;
        padding: 40px 20px;
        display: flex;
        flex-direction: column;
        gap: 30px;
    }

    /* Section title */
    .top-sec h2 {
        font-size: 32px;
        font-weight: 700;
        background: linear-gradient(45deg, #3a7bd5, #00d2ff);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
        margin-bottom: 5px;
        text-align: center;
    }

    /* Category navigation */
    .categorys {
        display: flex;
        justify-content: center;
        gap: 20px;
        flex-wrap: wrap;
        margin-bottom: 10px;
    }

    .itm {
        font-size: 16px;
        font-weight: 500;
        cursor: pointer;
        position: relative;
        padding: 8px 16px;
        border-radius: 30px;
        background: rgba(255, 255, 255, 0.05);
        transition: all 0.3s ease;
    }

    .itm:hover {
        background: rgba(255, 255, 255, 0.1);
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .itm::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        width: 0;
        height: 2px;
        background: linear-gradient(45deg, #3a7bd5, #00d2ff);
        transition: width 0.3s ease, left 0.3s ease;
    }

    .itm:hover::after {
        width: 80%;
        left: 10%;
    }

    /* Cards container */
    .contnt {
        display: grid;
        grid-template-columns: repeat(3, 1fr); /* Ensures exactly 2 items per row */
        gap: 30px;
        justify-content: center;
    }


    /* Loading indicator */
    .loader {
        width: 50px;
        height: 50px;
        border: 5px solid rgba(255, 255, 255, 0.1);
        border-radius: 50%;
        border-top-color: #3a7bd5;
        margin: 50px auto;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .no-slides {
        grid-column: 1 / -1;
        text-align: center;
        padding: 50px;
        font-size: 18px;
        color: #777;
    }

    /* Card styling */
    .card {
        position: relative;
        background: rgba(20, 20, 30, 0.5);
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.05);
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }

    .card:hover {
        transform: translateY(-10px) scale(1.02);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
    }

    .card::before {
        content: '';
        position: absolute;
        top: -5px;
        left: -5px;
        right: -5px;
        bottom: -5px;
        z-index: -1;
        background: linear-gradient(45deg, #3a7bd5, #00d2ff, #3a7bd5);
        background-size: 200% 200%;
        border-radius: 20px;
        opacity: 0;
        transition: opacity 0.4s ease;
    }

    .card:hover::before {
        opacity: 0.5;
        animation: gradientBG 3s ease infinite;
    }

    @@keyframes gradientBG {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
    }

    .card-image {
        position: relative;
        height: 180px;
        overflow: hidden;
        cursor: pointer;
    }

    .card-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.5s ease;
    }

    .card:hover .card-image img {
        transform: scale(1.1);
    }

    .category-badge {
        position: absolute;
        top: 15px;
        right: 15px;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
        backdrop-filter: blur(4px);
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

    .card-content {
        padding: 20px;
    }

    .date {
        font-size: 12px;
        color: #aaa;
        margin-bottom: 8px;
    }

    .title {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 15px;
        line-height: 1.3;
        transition: color 0.3s ease;
    }

    .card:hover .title {
        background: linear-gradient(45deg, #3a7bd5, #00d2ff);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
    }

    /* Card interaction buttons */
    .interaction {
        display: flex;
        justify-content: space-between;
        margin-top: 15px;
    }

    .like-btn, .comment-btn {
        background: rgba(255, 255, 255, 0.05);
        border: none;
        padding: 8px 15px;
        border-radius: 10px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 5px;
        color: #ccc;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .like-btn:hover, .comment-btn:hover {
        background: rgba(255, 255, 255, 0.1);
        transform: translateY(-3px);
    }

    .like-btn:active, .comment-btn:active {
        transform: translateY(0);
    }

    .like-icon, .comment-icon {
        font-size: 16px;
    }

    .like-count, .comment-count {
        font-size: 14px;
    }

    /* Modal styling */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(10px);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        padding: 20px;
    }

    .modal-content {
        background: #1a1a25;
        width: 100%;
        max-width: 600px;
        max-height: 85vh;
        border-radius: 20px;
        overflow: hidden;
        position: relative;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
        display: flex;
        flex-direction: column;
        border: 1px solid rgba(255, 255, 255, 0.05);
        animation: modalEnter 0.3s ease;
    }

    @@keyframes modalEnter {
        from { opacity: 0; transform: scale(0.9); }
        to { opacity: 1; transform: scale(1); }
    }

    .close-btn {
        position: absolute;
        top: 15px;
        right: 15px;
        background: rgba(255, 255, 255, 0.1);
        border: none;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        color: #fff;
        cursor: pointer;
        transition: background 0.3s ease;
        z-index: 10;
    }

    .close-btn:hover {
        background: rgba(255, 255, 255, 0.2);
    }

    .modal-header {
        padding: 25px 25px 15px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    }

    .modal-header h2 {
        font-size: 24px;
        font-weight: 600;
        color: #fff;
        margin-bottom: 10px;
    }

    .modal-meta {
        display: flex;
        gap: 15px;
        color: #aaa;
        font-size: 14px;
    }

    .modal-date, .modal-category {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .modal-category {
        background: rgba(255, 255, 255, 0.1);
        padding: 3px 10px;
        border-radius: 12px;
        color: #3a7bd5;
    }

    .modal-description {
        padding: 20px 25px;
        color: #ddd;
        line-height: 1.7;
        font-size: 16px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    }

    /* Comments section styling */
    .comments-section {
        padding: 25px;
        overflow-y: auto;
    }

    .comments-section h3 {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 20px;
        color: #fff;
    }

    .comments-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
        max-height: 300px;
        overflow-y: auto;
        padding-right: 10px;
        margin-bottom: 20px;
    }

    .comments-list::-webkit-scrollbar {
        width: 6px;
    }

    .comments-list::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
    }

    .no-comments {
        text-align: center;
        padding: 20px;
        color: #777;
        font-style: italic;
    }

    .comment-item {
        display: flex;
        gap: 15px;
        animation: fadeIn 0.5s ease;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .comment-avatar {
        width: 40px;
        height: 40px;
        background: linear-gradient(45deg, #3a7bd5, #00d2ff);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        color: white;
        font-size: 18px;
        flex-shrink: 0;
    }

    .comment-content {
        background: rgba(255, 255, 255, 0.03);
        padding: 12px 15px;
        border-radius: 12px;
        flex-grow: 1;
        position: relative;
    }

    .comment-content::before {
        content: '';
        position: absolute;
        top: 15px;
        left: -8px;
        width: 0;
        height: 0;
        border-top: 8px solid transparent;
        border-bottom: 8px solid transparent;
        border-right: 8px solid rgba(255, 255, 255, 0.03);
    }

    .comment-author {
        font-weight: 600;
        color: #3a7bd5;
        margin-bottom: 5px;
    }

    .comment-text {
        color: #ddd;
        line-height: 1.5;
    }

    .comment-date {
        font-size: 12px;
        color: #777;
        margin-top: 5px;
        text-align: right;
    }

    /* Comment form */
    .comment-form {
        display: flex;
        gap: 10px;
        margin-top: 15px;
    }

    .comment-input {
        flex-grow: 1;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        padding: 12px 15px;
        color: #fff;
        font-size: 15px;
        transition: all 0.3s ease;
    }

    .comment-input:focus {
        outline: none;
        border-color: rgba(58, 123, 213, 0.5);
        background: rgba(255, 255, 255, 0.07);
        box-shadow: 0 0 0 3px rgba(58, 123, 213, 0.2);
    }

    .comment-input::placeholder {
        color: #777;
    }

    .submit-btn {
        background: linear-gradient(45deg, #3a7bd5, #00d2ff);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0 25px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .submit-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(58, 123, 213, 0.4);
    }

    .submit-btn:active {
        transform: translateY(0);
    }

    .submit-btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .spinner {
        width: 20px;
        height: 20px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 0.8s linear infinite;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .contnt {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        }

        .modal-content {
            max-width: 95%;
        }
    }

    @@media (max-width: 576px) {
        .categorys {
            gap: 10px;
        }

        .itm {
            padding: 6px 12px;
            font-size: 14px;
        }

        .modal-header h2 {
            font-size: 20px;
        }
    }
</style>