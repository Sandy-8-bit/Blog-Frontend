@inject HttpClient Http
@inject IJSRuntime JS
<!-- Main content -->
<div class="content-sec flex w-[1460px] justify-content-center">
    <div class="top-sec text-white">
        <h2>Popular topics</h2>
    </div>

    <!-- Category Filter -->
    <div class="categorys d-flex gap-5 text-white">
        <div class="itm" @onclick='() => FetchSlidesByCategory(null)'><a>All</a></div>
        <div class="itm" @onclick='() => FetchSlidesByCategory("Travel")'><a>Travel</a></div>
        <div class="itm" @onclick='() => FetchSlidesByCategory("Adventure")'><a>Adventure</a></div>
        <div class="itm" @onclick='() => FetchSlidesByCategory("Movie")'><a>Movie</a></div>
        <div class="itm" @onclick='() => FetchSlidesByCategory("Tech")'><a>Tech</a></div>
    </div>

    <div class="contnt">
        @if (slides is null)
        {
            <p>Loading slides...</p>
        }
        else if (slides.Count == 0)
        {
            <p>No slides found.</p>
        }
        else
        {
            @foreach (var slide in displayedSlides)
            {
                <div class="card" >
                    <div class="card-image">
                        <img src="@slide.ImageUrl" alt="@slide.Title">
                    </div>
                    <div class="card-content">
                        <p class="date">@slide.Date</p>
                        <h3 class="title">@slide.Title</h3>
                        <div class="interaction">
                            <button class="like-btn" @onclick="() => LikeSlide(slide.Id!)">❤️ Like (@slide!.Likes!.Count)</button>
                            <button class="comment-btn" @onclick="() => OpenModal(slide)">💬 Comment (@slide!.Comments!.Count)</button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Comment Modal -->
    @if (selectedSlide != null)
    {
        <div class="modal-overlay" @onclick="CloseModal">
            <div class="modal-content" @onclick:stopPropagation>
                <button class="close-btn" @onclick="CloseModal">&times;</button>
                <h2>@selectedSlide.Title</h2>
                <p class="date">@selectedSlide.Date</p>
                <p class="category">Category: @selectedSlide.Category</p>
                <p class="description">@selectedSlide.Description</p>

                <ul>
                    @foreach (var comment in selectedSlide.Comments!)
                    {
                        <li><strong>@comment.Username:</strong> @comment.Text</li>
                    }
                </ul>


                <input type="text" @bind="newComment" placeholder="Add a comment...">
                <button class="submit-btn" @onclick="SubmitComment" disabled="@isLoading">
                    @(isLoading ? "Posting..." : "Post Comment")
                </button>

            </div>
        </div>
    }
</div>

@code {
    private List<Slide> slides = new();
    private List<Slide> displayedSlides = new();
    private int maxDisplayCount = 6;
    private Slide? selectedSlide;
    private string? newComment;
    private string? username;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        LoadUsernameFromLocalStorage();
        await FetchSlidesByCategory(null);
    }

    private async Task FetchSlidesByCategory(string? category)
    {
        try
        {
            string baseUrl = "https://localhost:7061";
            string url = category is null ? $"{baseUrl}/api/slider" : $"{baseUrl}/api/slider/category/{category}";

            // Disable caching by adding a timestamp query parameter
            url += $"?timestamp={DateTime.UtcNow.Ticks}";

            slides = await Http.GetFromJsonAsync<List<Slide>>(url) ?? new();
            displayedSlides = slides.Take(maxDisplayCount).ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching slides: {ex.Message}");
        }
    }

    private void OpenModal(Slide slide)
    {
        selectedSlide = slide;
    }


    private void CloseModal()
    {
        selectedSlide = null;
    }
    private async Task LikeSlide(string slideId)
    {
        if (string.IsNullOrEmpty(username))
        {
            username = await PromptForUsername();
            if (string.IsNullOrEmpty(username)) return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync($"https://localhost:7061/api/slider/{slideId}/like", new { Username = username });

            if (response.IsSuccessStatusCode)
            {
                var updatedSlide = await response.Content.ReadFromJsonAsync<Slide>();
                if (updatedSlide != null)
                {
                    var slideIndex = slides.FindIndex(s => s.Id == slideId);
                    if (slideIndex != -1)
                    {
                        // Update the slide inside a new list to trigger UI update
                        slides = slides.Select(s => s.Id == slideId ? updatedSlide : s).ToList();
                        displayedSlides = slides.Take(maxDisplayCount).ToList();
                    }
                }
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error liking slide: {ex.Message}");
        }

        // Force UI Update
        StateHasChanged();
    }


    private async Task SubmitComment()
    {
        if (string.IsNullOrEmpty(username))
        {
            username = await PromptForUsername();
            if (string.IsNullOrEmpty(username)) return;
        }

        if (selectedSlide == null || string.IsNullOrWhiteSpace(newComment)) return;

        // Add a loading state
        isLoading = true;
        StateHasChanged();

        try
        {
            var commentObj = new Comment { Username = username, Text = newComment, Date = DateTime.UtcNow };

            // Update UI instantly by adding the comment to selectedSlide
            selectedSlide.Comments!.Add(commentObj);
            newComment = string.Empty;
            StateHasChanged(); // Refresh UI immediately

            var response = await Http.PostAsJsonAsync($"https://localhost:7061/api/slider/{selectedSlide.Id}/comment",
                new { Username = username, Comment = commentObj.Text });

            if (response.IsSuccessStatusCode)
            {
                var updatedSlide = await response.Content.ReadFromJsonAsync<Slide>();
                if (updatedSlide != null)
                {
                    // Find the slide and update its comments
                    var slideIndex = slides.FindIndex(s => s.Id == selectedSlide.Id);
                    if (slideIndex != -1)
                    {
                        slides[slideIndex] = updatedSlide;
                        displayedSlides = slides.Take(maxDisplayCount).ToList();
                    }

                    // Also update the selectedSlide in the modal
                    selectedSlide = updatedSlide;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding comment: {ex.Message}");
        }

        // Remove loading state
        isLoading = false;
        StateHasChanged();
    }



    private async Task<string?> PromptForUsername()
    {
        string? input = await JS.InvokeAsync<string>("prompt", "Enter your username:");
        if (!string.IsNullOrEmpty(input))
        {
            var expiry = DateTime.UtcNow.AddDays(1);
            await JS.InvokeVoidAsync("localStorage.setItem", "username", input);
            await JS.InvokeVoidAsync("localStorage.setItem", "username_expiry", expiry.ToString());
        }
        return input;
    }

    private async void LoadUsernameFromLocalStorage()
    {
        string? storedUsername = await JS.InvokeAsync<string>("localStorage.getItem", "username");
        string? expiryStr = await JS.InvokeAsync<string>("localStorage.getItem", "username_expiry");

        if (!string.IsNullOrEmpty(storedUsername) && DateTime.TryParse(expiryStr, out DateTime expiry) && expiry > DateTime.UtcNow)
        {
            username = storedUsername;
        }
        else
        {
            await JS.InvokeVoidAsync("localStorage.removeItem", "username");
            await JS.InvokeVoidAsync("localStorage.removeItem", "username_expiry");
        }
    }
    public class Slide
    {
       
        public string? Id { get; set; } = string.Empty;

        public string ImageUrl { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public string Date { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;

        public List<string>? Likes { get; set; } = new(); // Stores usernames who liked the post
        public List<Comment>? Comments { get; set; } = new(); // Stores comments
    }

    public class Comment
    {
        public string? Username { get; set; } = string.Empty;
        public string? Text { get; set; } = string.Empty;
        public DateTime? Date { get; set; }
    }


    public class LikeRequest
    {
        public string? Username { get; set; } = string.Empty;
    }

    public class CommentRequest
    {
        public string? Username { get; set; } = string.Empty;
        public string? Comment { get; set; } = string.Empty;
    }
}




<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Arial', sans-serif;
    }

    .itm {
        font-size: 16px;
        cursor: pointer;
    }

    body {
        display: flex;
        justify-content: center;
        align-items: center;
        
        background-color: #111;
    }



    .content-sec {
        width: 1100px;
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .card {
        width: 300px;
        height:330px;
        background: #1a1a1a;
        color: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        cursor: pointer;
        transition: transform 0.3s ease;
    }

        .card:hover {
            transform: scale(1.05);
        }

    .card-image img {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }

    .card-content {
        padding: 15px;
    }

    .date {
        font-size: 12px;
        color: #aaa;
        margin-bottom: 5px;
    }

    .title {
        font-size: 16px;
        font-weight: bold;
        margin-bottom: 8px;
    }

    .description {
        font-size: 13px;
        color: #ccc;
        line-height: 1.4;
    }

    .contnt {
        display: flex;
        flex-wrap: wrap;
        gap: 24px;
        
        align-items: flex-start;
        max-width: 1100px;
        padding: 10px;
       
    }

    .show-more-container {
        width: 100%;
        display: flex;
        justify-content: center;
    }

    .show-more-btn {
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s;
    }

        .show-more-btn:hover {
            background-color: #0056b3;
        }


    /* Modal Styling */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100vh; /* Ensure full height */
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center; /* Centers horizontally */
        align-items: center; /* Centers vertically */
        z-index: 1000;
        overflow-y:auto;
    }


    .modal-content {
        background: #fff;
        width: 500px;
        padding: 20px;
        border-radius: 10px;
        position: relative;
        text-align: center;
    }

        .modal-content img {
            width: 100%;
            height: auto;
            border-radius: 10px;
        }

        .modal-content h2 {
            margin-top: 10px;
            font-size: 24px;
            color: #333;
        }

        .modal-content .date, .modal-content .category {
            font-size: 14px;
            color: #555;
            margin: 5px 0;
        }

        .modal-content .description {
            font-size: 16px;
            color: #222;
            line-height: 1.5;
        }

    /* Close Button */
    .close-btn {
        position: absolute;
        top: 5px;
        right: 10px;
        background: none;
        border: none;
        font-size: 24px;
        color: #333;
        cursor: pointer;
    }

    .show-more-btn {
        margin: 20px auto;
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        display: block;
        transition: background 0.3s;
    }

        .show-more-btn:hover {
            background-color: #0056b3;
        }

    .contnt::-webkit-scrollbar {
        display: none;}

        .interaction {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
        }

        .like-btn, .comment-btn {
            background: #ff6600;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 5px;
            cursor: pointer;
            transition: 0.3s;
        }

            .like-btn:hover, .comment-btn:hover {
                background: #cc5500;
            }

        /* Comment Modal */
        .modal-content ul {
            list-style: none;
            padding: 0;
            max-height: 150px;
            overflow-y: auto;
        }

            .modal-content ul li {
                background: #333;
                padding: 10px;
                margin-bottom: 5px;
                border-radius: 5px;
                text-align: left;
                color: white;
            }

        .modal-content input {
            width: 100%;
            padding: 8px;
            margin-top: 10px;
            border-radius: 5px;
            border: 1px solid #555;
            background: #111;
            color: white;
        }

        .submit-btn {
            background: #ff6600;
            border: none;
            padding: 10px;
            width: 100%;
            border-radius: 5px;
            margin-top: 10px;
            cursor: pointer;
            font-size: 1rem;
        }

            .submit-btn:hover {
                background: #cc5500;
            }

</style>
